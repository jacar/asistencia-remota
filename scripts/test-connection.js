const fetch = require('node-fetch');

async function testConnection() {
  console.log('üß™ Testing connection and notification system...\n');
  
  const baseUrl = 'http://localhost:3001'; // Puerto del servidor backend
  
  try {
    // 1. Verificar estado del servidor
    console.log('üì° Verificando estado del servidor...');
    const healthResponse = await fetch(`${baseUrl}/api/health`);
    
    if (healthResponse.ok) {
      const healthData = await healthResponse.json();
      console.log('‚úÖ Servidor funcionando:', healthData);
    } else {
      console.log('‚ùå Servidor no responde:', healthResponse.status);
      return;
    }
    
    // 2. Simular conexi√≥n de cliente externo
    console.log('\nüîó Simulando conexi√≥n de cliente externo...');
    const connectionData = {
      socketId: 'test-client-123',
      ip: '192.168.1.100',
      timestamp: new Date().toISOString(),
      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      message: 'Nuevo dispositivo solicitando conexi√≥n desde 192.168.1.100',
      deviceInfo: {
        deviceType: 'Desktop',
        browser: 'Chrome',
        os: 'Windows',
        userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36...'
      }
    };
    
    console.log('üì§ Datos de conexi√≥n simulados:', {
      IP: connectionData.ip,
      Dispositivo: connectionData.deviceInfo.deviceType,
      Sistema: connectionData.deviceInfo.os,
      Navegador: connectionData.deviceInfo.browser,
      Hora: new Date(connectionData.timestamp).toLocaleTimeString()
    });
    
    // 3. Simular respuesta del host
    console.log('\nüë§ Simulando respuesta del host...');
    const hostResponse = {
      socketId: 'test-client-123',
      allowed: true
    };
    
    console.log('‚úÖ Host permitiendo conexi√≥n:', hostResponse);
    
    // 4. Simular notificaci√≥n de control remoto
    console.log('\nüéÆ Simulando solicitud de control remoto...');
    const controlRequest = {
      fromId: 'host-456',
      message: 'El t√©cnico est√° solicitando acceso para controlar tu computadora',
      timestamp: new Date().toISOString()
    };
    
    console.log('üì§ Solicitud de control remoto:', {
      De: controlRequest.fromId,
      Mensaje: controlRequest.message,
      Hora: new Date(controlRequest.timestamp).toLocaleTimeString()
    });
    
    // 5. Simular respuesta del cliente
    console.log('\nüë• Simulando respuesta del cliente...');
    const clientResponse = {
      allowed: true,
      targetId: 'host-456',
      message: 'El cliente ha aceptado tu solicitud de control remoto'
    };
    
    console.log('‚úÖ Cliente aceptando control remoto:', clientResponse);
    
    // 6. Resumen de la prueba
    console.log('\nüìã Resumen de la prueba:');
    console.log('  ‚úÖ Servidor funcionando correctamente');
    console.log('  ‚úÖ Notificaciones de conexi√≥n externa implementadas');
    console.log('  ‚úÖ Informaci√≥n detallada del dispositivo incluida');
    console.log('  ‚úÖ Notificaciones de control remoto mejoradas');
    console.log('  ‚úÖ Sistema de permisos funcionando');
    
    console.log('\nüéØ Para probar en navegadores:');
    console.log('  1. Abre http://localhost:3000 en una pesta√±a (ser√° el host)');
    console.log('  2. Abre http://localhost:3000 en otra pesta√±a (ser√° el cliente)');
    console.log('  3. El host ver√° una notificaci√≥n cuando el cliente se conecte');
    console.log('  4. El host puede permitir o rechazar la conexi√≥n');
    console.log('  5. Una vez conectados, pueden probar el control remoto');
    
    console.log('\nüîß Caracter√≠sticas implementadas:');
    console.log('  ‚Ä¢ Notificaciones detalladas con informaci√≥n del dispositivo');
    console.log('  ‚Ä¢ Modal mejorado con informaci√≥n completa');
    console.log('  ‚Ä¢ Toast notifications con botones de acci√≥n');
    console.log('  ‚Ä¢ Timestamps en todas las notificaciones');
    console.log('  ‚Ä¢ Logging detallado para debugging');
    console.log('  ‚Ä¢ Animaciones y transiciones suaves');
    
  } catch (error) {
    console.error('‚ùå Error en la prueba:', error.message);
  }
}

// Ejecutar la prueba
testConnection();
